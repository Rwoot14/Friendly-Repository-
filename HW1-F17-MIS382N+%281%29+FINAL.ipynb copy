{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "# <p style=\"text-align: center;\">MIS 382N: ADVANCED PREDICTIVE MODELING - MSBA</p>\n",
    "# <p style=\"text-align: center;\">Assignment 1</p>\n",
    "## <p style=\"text-align: center;\">Total points: 75</p>\n",
    "## <p style=\"text-align: center;\">Due: Tuesday, September 13 submitted via Canvas by 11:59 p</p>\n",
    "\n",
    "Your homework should be written in a **Jupyter notebook**. You may work in groups of two if you wish. Only one student per team needs to submit the assignment on Canvas.  But be sure to include name and UTEID for both students.  Homework groups will be created and managed through Canvas, so please do not arbitrarily change your homework group.  \n",
    "\n",
    "Also, please make sure your code runs and the graphics (and anything else) are displayed in your notebook before submitting. (%matplotlib inline)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 1: Applications of machine learning (10 pts)\n",
    "\n",
    "Read the [article](http://www.datasciencecentral.com/profiles/blogs/20-data-science-systems-used-by-amazon-to-operate-its-business) \"21 data science systems used by Amazon to operate its business\" and pick any two of the data science systems used by Amazon according to this blog.\n",
    "\n",
    "(5 pts each) For each of these two system you have chosen:\n",
    "\n",
    "What kind of machine learning problem is involved (e.g. classification, regression, clustering, outlier detection,...)? Speculate on what kind of data may be needed and how the results can be useful to the company.\n",
    "\n",
    "\n",
    "## Answer\n",
    "Supply chain optimization (I). Sites selection for warehouses to minimize distribution costs (proximity to vendors, balanced against proximity to consumers). How many warehouses are needed, and what capacity each of them should have. \n",
    "\n",
    "The ideal data would be demographic\\orders data on both the vendors and nearby population. Amazon would need to know the order volume of nearby populations along with projected growth which would be a forecasting problem. Also Amazon would need to compare that to vendor/transportation data to see what the optimal placement of warehouses would be, and how much capacity they're likely to have. The results from this analysis would increase efficiency in delivery time, and an increase in margins by decrease the costs associated with transportation. \n",
    "\n",
    "\n",
    "Fake reviews detection. They still have tons of progress to make in this area: at least categorizing users would be a first step, so that buyers know what kind of user produced a specific review; then relevancy algorithms must be used to assess how relevant a review is for a specific product, knowing that most likes and stars assigned by users are biased - partly because most normal people don't have time or interest to write a review. Indeed, fake reviews is a lucrative business taking advantages of inefficiencies in platforms such as Amazon. The best solution is to remove user-generated reviews and replace them, for each product, by number of sales over the last 30 days.\n",
    "\n",
    "The data needed for this problem would be reviews on products, possibly, if available, data that turks have already went through on a sample data set that has fake reviews in it. This data would be used as a training set for a classification model that would learn to predict fake reviews. This model would look at the attributes of the real reviews and see if there are differences between the fake reviews and real reviews. Depending on how accurate the model is at detecting fake reviews, it would provide enormous value in parsing down the reviews which need inspection to see if they're fake or not. \n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 2: Maximum likelihood estimate (10 pts)\n",
    "\n",
    "Suppose a manager at an internet sales company wants to estimate how fast his salesperson is generating successful leads. Instead of recording the time for each lead, the time taken to generate the next 5 leads are recorded, i.e., there is one recording (denoting the elapsed time) for every 5 consecutive leads. For a specific salesperson, the time intervals recorded are {1,3,1.5,4,2,7,1.2,2,4,3.1} hours. \n",
    "\n",
    "A statistician suggests that if these time intervals are assumed to arise by i.i.d. sampling from the following distribution:\n",
    "$$ p(t) = \\frac{1}{C \\times \\theta^{5}}t^{4}exp^{-\\frac{t}{\\theta}},$$\n",
    "(where C is a normalizing constant). Therefore, if $\\theta$ can be estimated, then he can provide detailed information\n",
    "about the lead generation process, including average rates, variances etc.\n",
    "\n",
    "Find the Maximum Likelihood estimate for $\\theta$ based on the recorded observations.\n",
    "\n",
    "\n",
    "## Answer"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 3: Multiple Linear Regression in Python (25 pts)\n",
    "\n",
    "Use the following code to import the boston housing dataset and linear models in python.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "boston = datasets.load_boston()\n",
    "\n",
    "X = boston.data\n",
    "y = boston.target\n",
    "features=boston.feature_names"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The dataset information can be found [here](http://scikit-learn.org/stable/datasets/index.html#boston-house-prices-dataset).\n",
    "\n",
    "a. (3 pts) Print the shape (number of rows and columns) of the feature matrix, and print the first 5 rows.\n",
    "\n",
    "b.  (6 pts) Using ordinary least squares, fit a multiple linear regression (MLR) on all the feature variables using the entire dataset (506 rows). Report the regression coefficient of each input feature and evaluate the model using mean squared error (MSE).  Example of ordinary least squares in Python is shown in Section 1.1.1 of http://scikit-learn.org/stable/modules/linear_model.html.\n",
    "\n",
    "c.  (6 pts) Split the data into a training set and a test set.  Use the first 400 rows for training set and remaining rows for test set.  Fit an MLR using the training set.  Evaluate the trained model using the training set and the test set, respectively.  Compare the two MSE values thus obtained.\n",
    "\n",
    "d.  (6 pts) Do you think your MLR model is reasonable for this problem? You may look at the distribution of residuals to provide an informed answer.\n",
    "\n",
    "e. (5 pts) Use the following code to add new features to the dataset.  You should have 26 variables now.  Note that this code adds one squared term for each variable; in practice one may introduce only a few terms based on domain knowledge or experimentation.  Repeat (c) and report the MSE values of the training set and the test set, respectively."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "X = np.concatenate((X, np.square(X)), axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Answer\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Populating the interactive namespace from numpy and matplotlib\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/ReeceWooten/anaconda/lib/python2.7/site-packages/statsmodels/compat/pandas.py:56: FutureWarning: The pandas.core.datetools module is deprecated and will be removed in a future version. Please use the pandas.tseries module instead.\n",
      "  from pandas.core import datetools\n"
     ]
    }
   ],
   "source": [
    "from sklearn import linear_model\n",
    "from pandas import Series, DataFrame\n",
    "import pandas as pd\n",
    "%pylab inline\n",
    "from sklearn import datasets, linear_model\n",
    "from sklearn.metrics import mean_squared_error\n",
    "import numpy as np\n",
    "# Special packages\n",
    "import statsmodels.api as sm\n",
    "from patsy import dmatrices"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# A"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#x = np.empty(506)\n",
    "#x.fill(1)\n",
    "#X = np.insert(X,0,x, axis = 1)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# B"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Coefficients: \\n',                  1\n",
      "0                 \n",
      "CRIM     -0.107171\n",
      "ZN        0.046395\n",
      "INDUS     0.020860\n",
      "CHAS      2.688561\n",
      "NOX     -17.795759\n",
      "RM        3.804752\n",
      "AGE       0.000751\n",
      "DIS      -1.475759\n",
      "RAD       0.305655\n",
      "TAX      -0.012329\n",
      "PTRATIO  -0.953464\n",
      "B         0.009393\n",
      "LSTAT    -0.525467)\n",
      "Mean squared error: 21.90\n"
     ]
    },
    {
     "ename": "NameError",
     "evalue": "name 'r2_score' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-5-0bf4b9b15f89>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     14\u001b[0m       % mean_squared_error(y,y_pred))\n\u001b[1;32m     15\u001b[0m \u001b[0;31m# Explained variance score: 1 is perfect prediction\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m \u001b[0;32mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Variance score: %.2f'\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mr2_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'r2_score' is not defined"
     ]
    }
   ],
   "source": [
    "# Create linear regression object\n",
    "regr = linear_model.LinearRegression()\n",
    "\n",
    "# Train the model using the training sets\n",
    "regr.fit(X,y)\n",
    "\n",
    "# Make predictions using the testing set\n",
    "y_pred = regr.predict(X)\n",
    "\n",
    "# The coefficients\n",
    "print('Coefficients: \\n', DataFrame((zip(features, regr.coef_))).set_index(0))\n",
    "# The mean squared error\n",
    "print(\"Mean squared error: %.2f\"\n",
    "      % mean_squared_error(y,y_pred))\n",
    "# Explained variance score: 1 is perfect prediction\n",
    "print('Variance score: %.2f' % r2_score(y,y_pred))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "36.491103280361983"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regr.intercept_\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# C"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "105"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 239,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "X_train=X[:400]\n",
    "y_train=y[:400]\n",
    "X_test=X[400:]\n",
    "y_test=y[400:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 240,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Coefficients: \\n', array([  0.00000000e+00,  -1.91246374e-01,   4.42289967e-02,\n",
      "         5.52207977e-02,   1.71631351e+00,  -1.49957220e+01,\n",
      "         4.88773025e+00,   2.60921031e-03,  -1.29480799e+00,\n",
      "         4.84787214e-01,  -1.54006673e-02,  -8.08795026e-01,\n",
      "        -1.29230427e-03,  -5.17953791e-01]))\n",
      "Mean squared error: 38.16\n",
      "Variance score: -0.35\n"
     ]
    }
   ],
   "source": [
    "# Create linear regression object\n",
    "regr = linear_model.LinearRegression()\n",
    "\n",
    "# Train the model using the training sets\n",
    "regr.fit(X_train,y_train)\n",
    "\n",
    "# Make predictions using the testing set\n",
    "y_pred = regr.predict(X_test)\n",
    "\n",
    "# The coefficients\n",
    "print('Coefficients: \\n', regr.coef_)\n",
    "# The mean squared error\n",
    "print(\"Mean squared error: %.2f\"\n",
    "      % mean_squared_error(y_test,y_pred))\n",
    "# Explained variance score: 1 is perfect prediction\n",
    "print('Variance score: %.2f' % r2_score(y_test,y_pred))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# D"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 242,
   "metadata": {
    "collapsed": true,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "resid=y_pred-y_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.text.Text at 0x119f66610>"
      ]
     },
     "execution_count": 243,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11a2a6b90>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(y_pred, resid)\n",
    "plt.xlabel('y_pred', fontsize=18)\n",
    "plt.ylabel('Residual', fontsize=16)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# E"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "X = np.concatenate((X, np.square(X)), axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "X_train=X[1:400]\n",
    "y_train=y[1:400]\n",
    "X_test=X[401:506]\n",
    "y_test=y[401:506]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Coefficients: \\n', array([ -6.29858595e-01,  -4.45165189e-02,   1.19794162e-01,\n",
      "         1.12715814e+00,  -3.53735534e+01,  -1.70334797e+01,\n",
      "        -1.77939367e-02,  -2.46397289e+00,   6.33212274e-01,\n",
      "        -1.07058926e-01,  -6.13023162e+00,   4.17195544e-02,\n",
      "        -1.45158404e+00,   5.05473617e-03,   5.07111842e-04,\n",
      "        -4.40099663e-03,   1.12715811e+00,   8.70178640e+00,\n",
      "         1.60509628e+00,   2.85884612e-04,   1.34957549e-01,\n",
      "        -3.10265747e-02,   1.41835054e-04,   1.51177799e-01,\n",
      "        -7.52873183e-05,   2.73178550e-02]))\n",
      "Mean squared error: 32.14\n",
      "Variance score: -0.17\n"
     ]
    }
   ],
   "source": [
    "# Create linear regression object\n",
    "regr = linear_model.LinearRegression()\n",
    "\n",
    "# Train the model using the training sets\n",
    "regr.fit(X_train,y_train)\n",
    "\n",
    "# Make predictions using the testing set\n",
    "y_pred = regr.predict(X_test)\n",
    "\n",
    "# The coefficients\n",
    "print('Coefficients: \\n', regr.coef_)\n",
    "# The mean squared error\n",
    "print(\"Mean squared error: %.2f\"\n",
    "      % mean_squared_error(y_test,y_pred))\n",
    "# Explained variance score: 1 is perfect prediction\n",
    "print('Variance score: %.2f' % r2_score(y_test,y_pred))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.text.Text at 0x118c63b10>"
      ]
     },
     "execution_count": 148,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nATssecXdphNNAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1191dd7d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "resid=y_pred-y_test\n",
    "plt.scatter(y_pred, resid)\n",
    "plt.xlabel('y_pred', fontsize=18)\n",
    "plt.ylabel('Residual', fontsize=16)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 4: Ridge and Lasso Regression (25 points)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using the same boston data from before, in this question you will explore the application of Lasso and Ridge regression using sklearn package in Python. The following code will split the data into training and test set using [train_test_split](http://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html) with **random state 20** and **test_size = 0.33**.  Note: lambda is called alpha in sklearn."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "boston = datasets.load_boston()\n",
    "X = boston.data\n",
    "y = boston.target\n",
    "features=boston.feature_names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X = np.concatenate((X, np.square(X)), axis=1)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.33, random_state=20)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1) Use sklearn.linear_model.Lasso and sklearn.linear_model.Ridge classes to do a [5-fold cross validation](http://scikit-learn.org/stable/auto_examples/exercises/plot_cv_diabetes.html#example-exercises-plot-cv-diabetes-py) using sklearn's [KFold](http://scikit-learn.org/stable/modules/generated/sklearn.cross_validation.KFold.html). For the sweep of the regularization parameter, we will look at a grid of values ranging from $\\lambda = 10^{10}$ to $\\lambda = 10^{-2}$. In Python, you can consider this range of values as follows:\n",
    "\n",
    "      import numpy as np\n",
    "\n",
    "      alphas =  10**np.linspace(10,-2,100)*0.5\n",
    "\n",
    "  Report the best chosen $\\lambda$ based on cross validation. The cross validation should happen on your training data using  average MSE as the scoring metric. (8pts)\n",
    "\n",
    "2) Run ridge and lasso for all of the alphas specified above (on training data), and plot the coefficients learned for each of them - there should be one plot each for lasso and ridge, so a total of two plots; the plots for different features for a method should be on the same plot (e.g. Fig 6.6 of JW). What do you qualitatively observe when value of the regularization parameter is changed? (7pts)\n",
    "\n",
    "3) Run least squares regression, ridge, and lasso on the training data. For ridge and lasso, use only the best regularization parameter. Report the prediction error (MSE) on the test data for each. (5pts)\n",
    "\n",
    "4) Run lasso again with cross validation using [sklearn.linear_model.LassoCV](http://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LassoCV.html). Set the cross validation parameters as follows:\n",
    "\n",
    "    LassoCV(alphas=None, cv=10, max_iter=10000)\n",
    "\n",
    "Report the best $\\lambda$ based on cross validation. Run lasso on the training data using the best $\\lambda$ and report the coefficeints for 26 variables. What do you observe from these coefficients? (5pts)\n",
    "\n",
    "## Answer\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn import datasets\n",
    "from sklearn.linear_model import LassoCV\n",
    "from sklearn.linear_model import Lasso\n",
    "from sklearn.model_selection import KFold\n",
    "from sklearn.model_selection import GridSearchCV\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import scale\n",
    "X_train_scaled = scale(X_train, axis=0, with_mean=True, with_std=True, copy=True)\n",
    "y_train_scaled = scale(y_train, axis=0, with_mean=True, with_std=True, copy=True)\n",
    "X_test_scaled = scale(X_test, axis=0, with_mean=True, with_std=True, copy=True)\n",
    "y_test_scaled = scale(X_train, axis=0, with_mean=True, with_std=True, copy=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Lasso setup for cross validating the shrinkage parameter with K_fold cv.\n",
    "lasso = Lasso(random_state=0)\n",
    "alphas = 10**np.linspace(10,-2,100)*0.5\n",
    "\n",
    "tuned_parameters = [{'alpha': alphas}]\n",
    "n_folds = 5\n",
    "\n",
    "# Uses function gridsearch to iterate the lasso model over the k_folds\n",
    "clf = GridSearchCV(lasso, tuned_parameters, cv=n_folds, refit=False,scoring='neg_mean_squared_error')#refit needs to be true?? need to standardize x's??\n",
    "clf.fit(X_train_scaled, y_train)\n",
    "#stores the scores of the cross validation\n",
    "scores = clf.cv_results_['mean_test_score']\n",
    "scores_std = clf.cv_results_['std_test_score']\n",
    "\n",
    "########\n",
    "# CODE NOT USED \n",
    "########\n",
    "#plt.figure().set_size_inches(8, 6)\n",
    "#plt.semilogx(alphas, scores)\n",
    "\n",
    "# plot error lines showing +/- std. errors of the scores\n",
    "#std_error = scores_std / np.sqrt(n_folds)\n",
    "\n",
    "#plt.semilogx(alphas, scores + std_error, 'b--')\n",
    "#plt.semilogx(alphas, scores - std_error, 'b--')\n",
    "\n",
    "# alpha=0.2 controls the translucency of the fill color\n",
    "#plt.fill_between(alphas, scores + std_error, scores - std_error, alpha=0.2)\n",
    "\n",
    "#plt.ylabel('CV score +/- std error')\n",
    "#plt.xlabel('alpha')\n",
    "#plt.axhline(np.max(scores), linestyle='--', color='.5')\n",
    "#plt.xlim([alphas[0], alphas[-1]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'alpha': 0.015269277544167062}\n"
     ]
    }
   ],
   "source": [
    "lasso_param=clf.best_params_\n",
    "print(clf.best_params_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The optimal lambda for the cross validated lasso regression is the alpha show above. The lambda is relatively small meaning that the model needs to be more complex to get the optimal MSE. We chose to normalize the data because the data were all of different magnitudes/units and needed to be normalized so the appropriate lambda could be chosen for all the parameters. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.linear_model import Ridge\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Ridge Regression\n",
    "ridge = Ridge(random_state=0)\n",
    "alphas = 10**np.linspace(10,-2,100)*0.5\n",
    "\n",
    "tuned_parameters = [{'alpha': alphas}]\n",
    "n_folds = 5\n",
    "\n",
    "clf = GridSearchCV(ridge, tuned_parameters, cv=n_folds, refit=False,scoring='neg_mean_squared_error')\n",
    "clf.fit(X_train_scaled, y_train)\n",
    "scores = clf.cv_results_['mean_test_score']\n",
    "scores_std = clf.cv_results_['std_test_score']\n",
    "#plt.figure().set_size_inches(8, 6)\n",
    "#plt.semilogx(alphas, scores)\n",
    "\n",
    "# plot error lines showing +/- std. errors of the scores\n",
    "#std_error = scores_std / np.sqrt(n_folds)\n",
    "\n",
    "#plt.semilogx(alphas, scores + std_error, 'b--')\n",
    "#plt.semilogx(alphas, scores - std_error, 'b--')\n",
    "\n",
    "# alpha=0.2 controls the translucency of the fill color\n",
    "#plt.fill_between(alphas, scores + std_error, scores - std_error, alpha=0.2)\n",
    "\n",
    "#plt.ylabel('CV score +/- std error')\n",
    "#plt.xlabel('alpha')\n",
    "#plt.axhline(np.max(scores), linestyle='--', color='.5')\n",
    "#plt.xlim([alphas[0], alphas[-1]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'alpha': 0.3289666123287841}\n"
     ]
    }
   ],
   "source": [
    "ridge_param=clf.best_params_\n",
    "print(clf.best_params_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The optimal lambda for the cross validated Ridge regression is the alpha show above. The lambda ismuch larger than the lasso regression. This is likley do to the inability for the ridge regression to force the coef.  to zero.  We chose to normalize the data because the data were all of different magnitudes/units and needed to be normalized so the appropriate lambda could be chosen."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.text.Text at 0x117198750>"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nrkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11701fd90>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lasso = Lasso(random_state=0)\n",
    "alphas = 10**np.linspace(10,-2,100)*0.5\n",
    "tuned_parameters = [{'alpha': alphas}]\n",
    "n_folds = 5\n",
    "coefs = []\n",
    "for a in alphas:\n",
    "    lasso.set_params(alpha=a)\n",
    "    lasso.fit(X_train_scaled, y_train)\n",
    "    coefs.append(lasso.coef_)\n",
    "\n",
    "\n",
    "ax = plt.gca()\n",
    "ax.plot(alphas*2, coefs)\n",
    "ax.set_xscale('log')\n",
    "plt.axis('tight')\n",
    "plt.xlabel('alpha')\n",
    "plt.ylabel('weights')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### For the lasso regression The Coef.'s go to 0 relatively quickly for a small lambda. This means that the model will be similar to the OLS model. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.text.Text at 0x1174c8b10>"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\ngg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11742c410>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ridge = Ridge(random_state=0)\n",
    "alphas = 10**np.linspace(10,-2,100)*0.5\n",
    "tuned_parameters = [{'alpha': alphas}]\n",
    "n_folds = 5\n",
    "coefs = []\n",
    "for a in alphas:\n",
    "    ridge.set_params(alpha=a)\n",
    "    ridge.fit(X_train_scaled, y_train)\n",
    "    coefs.append(ridge.coef_)\n",
    "\n",
    "\n",
    "ax = plt.gca()\n",
    "ax.plot(alphas*2, coefs)\n",
    "ax.set_xscale('log')\n",
    "plt.axis('tight')\n",
    "plt.xlabel('alpha')\n",
    "plt.ylabel('weights')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The Ridge regression model has a larger lambda than the lasso regression with the coef. converging to 0. This means that the model is getting further away from the normal OLS model and is able to shrink the coef. more. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### For both of the plots as lambda increases, the coef. of both models either reach 0 (for lasso) or converge to 0 (for ridge). This is because lambda is shrinks the ceof.'s to prevent overfitting. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean squared error: 17.30\n"
     ]
    }
   ],
   "source": [
    "# Create linear regression object\n",
    "regr = linear_model.LinearRegression()\n",
    "\n",
    "# Train the model using the training sets\n",
    "regr.fit(X_train,y_train)\n",
    "\n",
    "# Make predictions using the testing set\n",
    "y_pred = regr.predict(X_test)\n",
    "\n",
    "\n",
    "# The mean squared error\n",
    "print(\"Mean squared error: %.2f\"\n",
    "      % mean_squared_error(y_test,y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The OLS regression has the best MSE which indicates that there is not a need to scale and use a shrinking term for the model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "lasso=linear_model.Lasso(alpha=lasso_param['alpha'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "19.422803352492011"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lasso_fit=lasso.fit(X_train_scaled, y_train)\n",
    "y_pred=lasso_fit.predict(X_test_scaled)\n",
    "mean_squared_error(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The Lasso regression has the worst MSE compared to the ridge and ols regression. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "Ridge=linear_model.Ridge(alpha=ridge_param['alpha'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "18.473812144282892"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ridge_fit=Ridge.fit(X_train_scaled, y_train)\n",
    "y_pred=ridge_fit.predict(X_test_scaled)\n",
    "mean_squared_error(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The Ridge regression does better than the Lasso but worse than the OLS. This is likley because while the ridge regression shrinks the paramaters of the model, it still uses information from the other variables"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "19.454760316325853"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lasso=LassoCV(fit_intercept = True,alphas=None, cv=10, max_iter=10000)\n",
    "lasso_fit=lasso.fit(X_train_scaled, y_train)\n",
    "y_pred=lasso_fit.predict(X_test_scaled)\n",
    "mean_squared_error(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The models MSE does not change from before "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.016104539479952811"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lasso_fit.alpha_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The Lambda reported from the model is shown above and is very small, the lasso model doesnt need to shrink the coef. that much"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ -1.13543215,  -0.        ,   0.        ,   0.08814885,\n",
       "        -0.        , -10.66018855,   0.        ,  -4.11106509,\n",
       "         1.85028684,  -1.64656239,  -1.48574479,   0.54013444,\n",
       "        -9.52449584,   0.        ,   0.14461151,   0.33867036,\n",
       "         0.32166488,  -2.10470392,  13.52323739,   0.46129833,\n",
       "         1.98623453,   0.        ,  -0.        ,   0.        ,\n",
       "        -0.        ,   5.50907583])"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lasso_fit.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>CRIM</th>\n",
       "      <td>-1.135432</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ZN</th>\n",
       "      <td>-0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>INDUS</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CHAS</th>\n",
       "      <td>0.088149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NOX</th>\n",
       "      <td>-0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RM</th>\n",
       "      <td>-10.660189</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AGE</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DIS</th>\n",
       "      <td>-4.111065</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RAD</th>\n",
       "      <td>1.850287</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TAX</th>\n",
       "      <td>-1.646562</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PTRATIO</th>\n",
       "      <td>-1.485745</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B</th>\n",
       "      <td>0.540134</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LSTAT</th>\n",
       "      <td>-9.524496</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 1\n",
       "0                 \n",
       "CRIM     -1.135432\n",
       "ZN       -0.000000\n",
       "INDUS     0.000000\n",
       "CHAS      0.088149\n",
       "NOX      -0.000000\n",
       "RM      -10.660189\n",
       "AGE       0.000000\n",
       "DIS      -4.111065\n",
       "RAD       1.850287\n",
       "TAX      -1.646562\n",
       "PTRATIO  -1.485745\n",
       "B         0.540134\n",
       "LSTAT    -9.524496"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "DataFrame((zip(features, lasso_fit.coef_))).set_index(0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### From the lasso regression estimated coef, INDUS, ZN, NOX, and age contain no information for the response variable and were shrunk to 0 by the lasso model. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 5  (5 pts)\n",
    "\n",
    "A regression model that includes \"interaction terms\" (i.e. quadratic terms of the form $x_ix_j$) as predictors in addition to the linear terms is clearly more general than a corresponding model that employs the same independent variables but only uses the linear terms. Outline two situations where the simpler (less general) model would be preferred to the more powerful model that includes interactive terms.\n",
    "\n",
    "## Answer\n",
    "\n",
    "1: If the data were fit perfectly by a linear approxamation adding interaction terms to the model would only increase the variance of the model, with no significant decrease in bias. An example might be years of education as an undergraduate and total amount paid in tuition. \n",
    "\n",
    "2: If the data were extermely noisy, adding more interaction terms might be just 'chasing noise'. An example might be predicting stock market prices. If you fit the data really well with a complicated model you will likley just be chasing the noise of the stock market and wont make good predictions out of sample. A much simplier model would be suffice to adequetly predict stock market prices, like yesterdays stock price. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
